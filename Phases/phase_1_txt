Hello, welcome to phase 1:

I will document my progress through phase 1:

https://pypi.org/project/yfinance/
Chose Yahoo Finance as our data provider

Here's our guide on the installation
https://ranaroussi.github.io/yfinance/

1. Configuration on windows:

Installing yfinance:
pip install yfinance

Installing Pythonscript for mySQL:

pip install mysql-connector-python


2. Setting up mysql:

Downloading benchwork and mysqlserver to establish a server and connection

Following this youtube video: https://www.youtube.com/watch?v=hiS_mWZmmI0

After downloading the server and shell from the website

We set up the environment variable by copying the path to the mysql bin file

Now we should have established a connection to the database and by running the database.py, we created the Table 'tickers'

3. Writing code for fetching stock data into our database with python scripts and
utilizing the free yfinance API from Yahoo finance.

Structuring code and rewriting it, making it cleaner and easier to use, with use
I meant less duplicate codesÂ¨

To create relevant tables, I will now draw the UML diagrams as seen in the folder UML_Diagram

Adding python script to fetch historical data and add to the database

Plans for the future:
- Adding a docker to the prototype


4. Use the added data to create my application, adding graphs etc.
- Trying out flask, installed it by: pip install flask and updating python to the latest versions

http://127.0.0.1:5000/ to check the website

http://127.0.0.1:5000/stock/MSFT/prices
To check microsoft data

http://localhost:5000/stock/AAPL/prices
To check apple price stock data

created a new folder: static which is a default folder for Flask to utilize its non-dynamic files

Added the feature where the grapth is now showing the stock data

A toolbar is added where hovering the grapth will display exact data etc

Next step is to add so you can choose between stocks

While coding, organizing the code is better, both to create stability and make it easier to extend/develop the application

I have decided to make this project a prototype and build a way more complex application with react later on

Candlestick patterns were too complex for chart.js so I decided to swap to TradingView's lightweight charts:

npm install --save lightweight-charts

Changed my mind, will be adding custom candlesticks by following a youtube guide on chart.js youtube channel

Added a new feature where the user can choose what data to be viewed and added more flexibility

Next time, fix the bar chart bug and fixing candlesticks

I tried to insert Volvo but the tycket symbol was too long so I changed it.

After countering issues that the data could not be inserted due to it being too large or long, I had to alter the tables in MySQL

I fixed the candlestick issue, it was the plugins which made it diffucult for me to implement it. I didn't realize it until I opened the plugins and checked
whether it was valid which it wasn't so I tried other versions. One thing else was that the download of chart.js was a failure so after opening the folder.
I saw nothing which made sense why no graph displayed.

After staying stuck on that specific part. I implemented ohlc graph and added an extra volume chart under. I also cleaned some unnessecary code etc.

Added timesframes, changed the database, variable DATE to DATETIME instead to be able to fetch the lowertimeframes. Also daily, weekly, monthly canldes work now. hourly candle does work too but is a little bit buggy. Unfortunately 15min, 30min does not work yet.

Added the ability to zoom into the graph, fixed bugs where after pressing 10years for the historical data and then back to 5years. It would not display 5years anylonger. Another bugfix is the zoom, zooming out or in too much would destroy the graph. The zoom function is only featured in Candlesticks and OHLC graph.

Added fibonacci retracement as a technical tool. However, there's much to do and I am planning to leave this project and remake it in react instead.